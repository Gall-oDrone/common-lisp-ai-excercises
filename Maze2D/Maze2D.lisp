(load "maze_lib.lisp")
(add-algorithm 'dfs)
(add-algorithm 'best-fs)
(add-algorithm 'error-example)
;;;======================================================================================
;;;  Laberintos 2D.lisp
;;;      Resuelve el problema de laberintos con dfs y best-fs.
;;;   
;;;      Representación de los estados: 
;;;         Lista con dos sublistas internas, una para la celda actual y la otra para.
;;;			la celda a la que se quiere mover. 
;;;         Cada celda se representa por el número de fila (R) y el número de columna (C).
;;;                 Estado inciial:        Estado meta:
;;;                 R   C    R  C         	R  C    R  C
;;;               ((r0 c0) (r1 c1))       ((r0 c0) (r1 c1))
;;;
;;;      Diego Gallo Valenzuela.
;;;  Diciembre, 2020
;;;======================================================================================
(defparameter  *open* '())    ;; Frontera de busqueda...                                              
(defparameter  *memory* '())  ;; Memoria de intentos previos

(defparameter  *ops*  '( (:Arriba         		(1 0 0 0 0 0 0 0))
                         (:Abajo       			(0 1 0 0 0 0 0 0))
                         (:Izquierda  			(0 0 1 0 0 0 0 0))
                         (:Derecha        		(0 0 0 1 0 0 0 0))     
                         (:Arriba-Izq           (1 0 1 0 0 0 0 0))
						 (:Arriba-Der           (1 0 0 1 0 0 0 0))
						 (:Abajo-Izq            (0 1 1 0 0 0 0 0))
						 (:Abajo-Der            (0 1 0 1 0 0 0 0))))

(defparameter  *id*  -1)  ;; Identificador del ultimo nodo creado
(defparameter  *current-ancestor*  nil)  ;;Id del ancestro común a todos los descendientes que se generen
(defparameter  *solucion*  nil)  ;;lista donde se almacenará la solución recuperada de la memoria

;;;=======================================================================================
;;  CREATE-NODE (estado  op)  
;;      estado - Un estado del problema a resolver (sistema)...
;;          op - El operador cuya aplicación generó el [estado]...
;;;=======================================================================================
(defun  create-node (estado  op)
  "Construye y regresa un nuevo nodo de búsqueda que contiene al estado y operador recibidos como parámetro"
      (incf  *id*)  ;;incrementamos primero para que lo último en procesarse sea la respuesta
      (list  *id*  estado  *current-ancestor*  (first op)) )  ;;los nodos generados son descendientes de *current-ancestor*

;;;=======================================================================================
;;  INSERT-TO-OPEN   y   GET-FROM-OPEN  
;;        
;;        Insert-to-open  recibe una lista y una llave que identifica el metodo a usar para insertar:
;;             :dfs     Inserta los elementos de la lista en orden inverso y por el inicio de la lista
;;             :best-fs    Inserta los elementos de la lista en orden normal y por el final de la lista
;;        Get-from-open  siempre retira el primer elemento de la lista *open*
;;;=======================================================================================
(defun insert-to-open (estado  op  metodo) 
"Permite insertar nodos de la frontera de busqueda *open* de forma apta para buscar a lo profundo y a lo ancho"
     (let ((nodo  (create-node  estado  op)))
         (cond ((eql  metodo  :dfs)
	                  (push  nodo  *open*))
	           ((eql  metodo  :best-fs)
		          (setq  *open*  (append  *open*  (list nodo))))
	   	   (T  Nil)))  )


(defun get-from-open ()
"Recupera el siguiente elemento a revisar de  frontera de busqueda *open*"
      (pop  *open*))

;;;=======================================================================================
;;  CHAR-TO-LIST Y CHECK-IF-IS-INITIAL (estado)
;;        char-to-list: Convierte el valor inicial de *start* a tipo lista
;;        check-if-is-initial: Revisa si el estado inicial es el inicial, en cuyo caso
;;           regresa el estado inicial con estructura ((r0 c0) (r1 c1))
;;;=======================================================================================
(defun char-to-list (posición)
	(if (vectorp posición)
		(coerce posición 'list)
		posición
	)
)
(defun check-if-is-initial (estado)
	(if (numberp (first estado) )
		(list estado estado)
		estado
	)
)
;;;=======================================================================================
;;  HAS-OBSTACLES?, CHECL-BEFORE-BACKWARDS Y AVOID-CORNER (estado)
;;        has-obstacles?: Revisa si hay obstaculos en [nuevo-estado]
;;        check-before-backwards: Revisa si hay otros estados válidos antes de regresar a
;;        la celda anterior
;;		  avoid-corner: Regresa una lista que contiene la posición inmediata anterior y
;;						los operadores que aún no han sido evaluados
;;;=======================================================================================
(defun has-obstacles? (currentRow currentColumn nextRow nextColumn operator)
	(case operator
	 	(:Arriba  (or (= (get-cell-walls currentRow currentColumn) 12)
		 			 (= (get-cell-walls currentRow currentColumn) 0)
		 			 (= (get-cell-walls currentRow currentColumn) 2)
					 (= (get-cell-walls currentRow currentColumn) 4)
					 (= (get-cell-walls currentRow currentColumn) 6)
					 (= (get-cell-walls currentRow currentColumn) 8)
					 (= (get-cell-walls currentRow currentColumn) 10)
					 (= (get-cell-walls currentRow currentColumn) 12)
					 (= (get-cell-walls currentRow currentColumn) 14))
		)
		(:Abajo (or (= (get-cell-walls currentRow currentColumn) 0)
		 			 (= (get-cell-walls currentRow currentColumn) 1)
					 (= (get-cell-walls currentRow currentColumn) 2)
					 (= (get-cell-walls currentRow currentColumn) 3)
					 (= (get-cell-walls currentRow currentColumn) 8)
					 (= (get-cell-walls currentRow currentColumn) 9)
					 (= (get-cell-walls currentRow currentColumn) 10)
					 (= (get-cell-walls currentRow currentColumn) 11))
		)
		(:Izquierda (or (= (get-cell-walls currentRow currentColumn) 0)
		 			 (= (get-cell-walls currentRow currentColumn) 2)
					 (= (get-cell-walls currentRow currentColumn) 3)
					 (= (get-cell-walls currentRow currentColumn) 4)
					 (= (get-cell-walls currentRow currentColumn) 5)
					 (= (get-cell-walls currentRow currentColumn) 6)
					 (= (get-cell-walls currentRow currentColumn) 7))
		)
		(:Derecha  (or (= (get-cell-walls currentRow currentColumn) 0)
		 			 (= (get-cell-walls currentRow currentColumn) 1)
					 (= (get-cell-walls currentRow currentColumn) 4)
					 (= (get-cell-walls currentRow currentColumn) 5)
					 (= (get-cell-walls currentRow currentColumn) 8)
					 (= (get-cell-walls currentRow currentColumn) 9)
					 (= (get-cell-walls currentRow currentColumn) 12)
					 (= (get-cell-walls currentRow currentColumn) 13))
		)
		(:Arriba-Izq (or (and (= (get-cell-walls currentRow currentColumn) 0)
								  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 1)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 2)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 3)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 4)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 5)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 6)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 7)
							      (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 8)
							      (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 10)
							      (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 12)
							      (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 14)
							      (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
		 			 
				))
		(:Arriba-Der (or (and (= (get-cell-walls currentRow currentColumn) 0)
								  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 1)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 2)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 4)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 5)
							  	 (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 6)
							  	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 8)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 9)
							 	 (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 10)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 12)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 13)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 11)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 14)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
				))
		(:Abajo-Izq (or (and (= (get-cell-walls currentRow currentColumn) 0)
								  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))

							 (and (= (get-cell-walls currentRow currentColumn) 1)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 2)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 3)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 4)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 5)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 6)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 7)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 8)
							 	 (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
								(and (= (get-cell-walls currentRow currentColumn) 9)
							 	 (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
								(and (= (get-cell-walls currentRow currentColumn) 10)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
								(and (= (get-cell-walls currentRow currentColumn) 11)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 9)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 13)
								  ))
				))
		(:Abajo-Der (or (and (= (get-cell-walls currentRow currentColumn) 0)
								  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 1)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 2)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 3)
							 	   (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 4)
							  	  (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 5)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 8)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							(and (= (get-cell-walls currentRow currentColumn) 9)
							 	  (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 10)
							 	   (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 11)
							 	   (or (= (get-cell-walls nextRow nextColumn) 0)
								  	  (= (get-cell-walls nextRow nextColumn) 1)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 3)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 5)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 7)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 12)
							 	   (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
							 (and (= (get-cell-walls currentRow currentColumn) 13)
							 	   (or (= (get-cell-walls nextRow nextColumn) 0)
									  (= (get-cell-walls nextRow nextColumn) 2)
									  (= (get-cell-walls nextRow nextColumn) 4)
									  (= (get-cell-walls nextRow nextColumn) 6)
									  (= (get-cell-walls nextRow nextColumn) 8)
									  (= (get-cell-walls nextRow nextColumn) 10)
									  (= (get-cell-walls nextRow nextColumn) 12)
									  (= (get-cell-walls nextRow nextColumn) 14)
								  ))
		 			 
				))
	    (nil "invalid"))
)
(defun check-before-backwards (operadores last-operator accum estado)
	(if (Null operadores) accum
		(case last-operator
			(:Arriba (if (or (eql (first (first operadores)) :Abajo) (eql (first (first operadores)) :Abajo-Izq) (eql (first (first operadores)) :Abajo-Der))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Abajo (if (or (eql (first (first operadores)) :Arriba) (eql (first (first operadores)) :Arriba-Izq) (eql (first (first operadores)) :Arribe-Der))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Izquierda (if (or (eql (first (first operadores)) :Derecha) (eql (first (first operadores)) :Arriba-Der) (eql (first (first operadores)) :Abajo-Der))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Derecha (if (or (eql (first (first operadores)) :Izquierda) (eql (first (first operadores)) :Arriba-Izq) (eql (first (first operadores)) :Abajo-Izq))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Arriba-Izq (if (or (eql (first (first operadores)) :Abajo-Der) (eql (first (first operadores)) :Abajo))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Arriba-Der (if (or (eql (first (first operadores)) :Abajo-Izq) (eql (first (first operadores)) :Abajo))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Abajo-Izq (if (or (eql (first (first operadores)) :Arriba-Der) (eql (first (first operadores)) :Arriba))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(:Abajo-Der (if (or (eql (first (first operadores)) :Arriba-Iz) (eql (first (first operadores)) :Arriba))
				(check-before-backwards (cdr operadores) last-operator accum estado) 
				(check-before-backwards (cdr operadores) last-operator (setq accum (cons (car operadores) accum)) estado) 
				)
			)
			(nil "invalid"))
	)
)
(defun avoid-corner (nodo)
	(list (first (second nodo)) (remmeber-op? nodo (fourth nodo) ))
)
;;;=======================================================================================
;;  EXTRACT-LAST-OP Y REMEMBER-OP? (estado)
;;        extract-last-op: extra el último operador evaluado, anterior a la celda con esquinas
;;        remmeber-op? Revisa en *memory* el operador actual y lo filtra con la función anterior
;;;=======================================================================================
(defun extract-last-op (nodo lista-memoria)
	(cond ((null (first lista-memoria))  Nil)	        
		  ((and (equal  (first (second nodo))  (second (second (first lista-memoria)))) 
				(=  (third nodo)  (first (first  lista-memoria)))) (fourth (first  lista-memoria)))  ;;el estado es igual al que se encuentra en el nodo?
		(T  (extract-last-op  nodo  (rest lista-memoria))))
)
(defun remmeber-op? (nodo current-op)
	(let ((last-op (extract-last-op nodo  *memory*))
		  (nuevo-filtro nil ))
		(dolist  (op  *Ops*  nuevo-filtro)
			(case last-op
			(:Arriba (if (or (equal (first op) :Abajo) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Abajo (if (or (equal (first op) :Arriba) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Izquierda (if (or (equal (first op) :Derecha) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Derecha (if (or (equal (first op) :Izquierda) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Arriba-Izq (if (or (equal (first op) :Abajo-Der) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Arriba-Der (if (or (equal (first op) :Abajo-Izq) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Abajo-Izq (if (or (equal (first op) :Arriba-Der) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(:Abajo-Der (if (or (equal (first op) :Arriba-Izq) (equal (first op) current-op))
			 			 nil (setq nuevo-filtro (cons op nuevo-filtro))))
			(nil "invalid")) 
		)
	)
)
(defun  valid-operator? (op  estado)
"Predicado. Valida la aplicación de un operador a un estado...
     el estado tiene estructura:  [(<r0><c0>)(<r1><c1>)],
     el operador tiene estructura : [<etiqueta-humana> <lista operador con (<bit>)>]"  
  (let*  (
	    (r0  (first (first estado)))
	    (c0  (second (first estado)))
		(r1  (first (second estado)))
		(c1  (second (second estado)))
		)
		(and  (>= r0 0) 				;;la longitud mínima y máxima permitida para movimientos hacía arriba,
			  (< r0 (get-maze-rows))	;; hacia abajo, y a las esquinas
              (>= c0 0)					;; se evita que salga de los bordes de la pared.
			  (< c0 (get-maze-cols))
			  (>= r1 0)
			  (< r1 (get-maze-rows))
			  (>= c1 0)
			  (< c1 (get-maze-cols)))
	)  )  


;;;=======================================================================================
;;  VALID-STATE (estado)
;;        Predicado.  Indica si [estado]  es valido segun las restricciones del problema
;;                    Se llama a la función has-obstacles para validar si hay o no obstáculos
;;;=======================================================================================
(defun  valid-state? (op estado)
"Predicado. Valida  un estado según las restricciones generales del problema...
       el estado tiene estructura:  [(<r0><c0>)(<r1><c1>)]"
    (let (
		(r0  (first (first estado)))        ;;el estado tiene estructura [(<r0><c0>)(<r1><c1>)]
	    (c0  (second (first estado)))
	    (r1  (first (second estado)))
	    (c1  (second (second estado)))
		(operador (first op))
		)
		(case operador
	 	(:Arriba (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Abajo (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Izquierda (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Derecha  (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Arriba-Izq (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Arriba-Der (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Abajo-Izq (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
		(:Abajo-Der (if (null (has-obstacles? r0 c0 r1 c1 operador)) nil T))
	    (nil "invalid"))
	)  )

    
;;;=======================================================================================
;;  APPLY-OPERATOR (op, estado)
;;        Resuelve la tarea básica de cambiar de estado el sistema...
;;;=======================================================================================
(defun  apply-operator (op  estado) 
"Obtiene el descendiente de [estado] al aplicarle  [op]  SIN VALIDACIONES"
    (let*  (
	       (r0  (first (first estado)))
		   (c0  (second (first estado)))
	       (r1  (first (second estado)))
   	       (c1  (second (second estado)))
	       (operador (first op)))     ;; este operador es la etiqueta humana del operador...
	 (case operador
		(:Arriba 	  (list (list r0 c0 ) (list (- r0 1) c1)))
		(:Abajo 	  (list (list r0 c0 ) (list (+ r0 1) c1)))
		(:Izquierda   (list (list r0 c0 ) (list r0 (- c1 1))))
		(:Derecha  	  (list (list r0 c0 ) (list r0 (+ c1 1))))
		(:Arriba-Izq  (list (list r0 c0 ) (list (- r0 1) (- c1 1))))
		(:Arriba-Der  (list (list r0 c0 ) (list (- r0 1) (+ c1 1))))
		(:Abajo-Izq   (list (list r0 c0 ) (list (+ r0 1) (- c1 1))))
		(:Abajo-Der   (list (list r0 c0 ) (list (+ r0 1) (+ c1 1))))
	    (T "error"))))


;;;=======================================================================================
;;  EXPAND (estado)
;;        Construye y regresa una lista con todos los descendientes validos de [estado]
;;;=======================================================================================
(defun expand (nodo estado)
"Obtiene todos los descendientes válidos de un estado, aplicando todos los operadores en *ops* en ese mismo órden"
     (let ((descendientes  nil)
	     (nuevo-estado  nil)
		 (ops-filtrados *Ops*)
		 (accum nil)
		 (contador-de-ops 0)
		 (nuevos-ops nil))
		 (if (> (first nodo) 1)
		 	(setq nuevos-ops (check-before-backwards ops-filtrados (fourth nodo) accum estado))
			(setq nuevos-ops ops-filtrados)
		 )
           (dolist  (op  nuevos-ops  descendientes) 
	         (setq  nuevo-estado  (apply-operator  op estado))  ;; primero se aplica el operador  y  después
		 (when (or (and (valid-operator? op nuevo-estado)			;; se valida el resultado...
			    (valid-state?  op nuevo-estado)
				(setq contador-de-ops (+ contador-de-ops 1))))
				(setq estado (second nuevo-estado))
	            (setq  descendientes  (cons  (list nuevo-estado op) descendientes))))
		 (if (and (= contador-de-ops 0) (> (first nodo) 1))
			 (dolist  (op  (second (avoid-corner nodo ))  descendientes) 
	         		  (setq  nuevo-estado  (apply-operator  op (first (avoid-corner nodo ))))
		 		(when (or (and (valid-operator? op nuevo-estado)
			    (valid-state?  op nuevo-estado)))
				(setq estado (second nuevo-estado))
	            (setq  descendientes  (cons  (list nuevo-estado op) descendientes))))
		 	descendientes
		 ) 
		) )

(check-before-backwards *Ops* '(:ARRIBA (1 0 0 0 0 0 0 0)) '() nil) 
;;;=======================================================================================
;;  REMEMBER-STATE?  y  FILTER-MEMORIES
;;        Permiten administrar la memoria de intentos previos
;;;=======================================================================================
(defun  remember-state?  (estado lista-memoria)
"Busca un estado en una lista de nodos que sirve como memoria de intentos previos
     el estado tiene estructura:  [(<r0><c0>) (<r1><c1>)],
     el nodo tiene estructura : [<Id> <estado> <id-ancestro> <operador> ]"  
     (cond ((null  lista-memoria)  Nil)
			( (equal  estado  (second (first  lista-memoria)))  T)
		(T  (remember-state?  estado  (rest  lista-memoria))))  )


(defun  filter-memories (lista-estados-y-ops) 
"Filtra una lista de estados-y-operadores quitando aquellos elementos cuyo estado está en la memoria *memory*
     la lista de estados y operadores tiene estructura: [(<estado> <op>) (<estado> <op>) ... ]"
	 (print "filter-memories-arg-lista-estados-y-ops")
	 (print (first  lista-estados-y-ops))
     (cond ((null  lista-estados-y-ops)  Nil)
	       ((remember-state? (first (first  lista-estados-y-ops))  *memory*)  ;; si se recuerda el primer elemento de la lista, filtrarlo...
		       (filter-memories  (rest  lista-estados-y-ops)))
		(T  (cons  (first lista-estados-y-ops) (filter-memories  (rest  lista-estados-y-ops))))) )  ;; de lo contrario, incluirlo en la respuesta

;;;=======================================================================================
;;  EXTRACT-SOLUTION  y  DISPLAY-SOLUTION
;;       Recuperan y despliegan la secuencia de solucion del problema...
;;       extract-solution   recibe un nodo (el que contiene al estado meta) que ya se encuentra en la memoria y
;;                                    rastrea todos sus ancestros hasta llegar  al  nodo que contiene al estado inicial...
;;       display-solution  despliega en pantalla la lista global *solucion* donde ya se encuentra, en orden correcto,
;;                                    el proceso de solución del problema...
;;;=======================================================================================
(defun extract-solution (nodo)
"Rastrea en *memory* todos los descendientes de [nodo] hasta llegar al estado inicial"
	 (let ((solución '()))
     (labels ((locate-node  (id  lista)       ;; función local que busca un nodo por Id  y si lo encuentra regresa el nodo completo
		  (cond ((null  lista)  Nil)
		        ((eql  id  (first (first  lista))) (first  lista))
		        (T  (locate-node  id (rest  lista))))))
	  (let ((current  (locate-node  (first  nodo)  *memory*)))
	     (loop  while  (not (null  current))  do
		 (case (fourth current)
			(:Arriba (push  1  solución))
			(:Abajo (push  4  solución))
			(:Izquierda (push  6  solución))
			(:Derecha (push  2  solución))
			(:Arriba-Izq (push  7  solución))
			(:Arriba-Der (push  1  solución))
			(:Abajo-Izq (push  5  solución))
			(:Abajo-Der (push  3  solución))
			(nil "invalid")) 
		 (setq *solucion* solución)
		 ))
		 )))


(defun  display-solution (lista-nodos)
"Despliega la solución en forma conveniente y numerando los pasos"
    (format  t  "Solución con ~A  pasos:~%~%" (1- (length  lista-nodos)))
    (let  ((nodo  nil))
         (dotimes  (i (length  lista-nodos))
	      (setq  nodo  (nth  i  lista-nodos))
	      (if  (= i 0)
		   (format t "Inicio en: ~A~%" (second  nodo))  ;; a partir de este estado inicial
	       ;;else
		   (format t "\(~2A\)  aplicando ~20A se llega a ~A~%"  i (fourth  nodo)  (second  nodo)))))  )  ;; imprimir el número de paso, operador y estado...

;;;=======================================================================================
;;  RESET-ALL  y  BLIND-SEARCH
;;
;;       Recuperan y despliegan la secuencia de solucion del problema...
;;
;;       reset-all   Reinicializa todas las variables globales para una nueva ejecución
;;       blind-search  Función principal, realiza búsqueda desde un estado inicial a un estado meta
;;;=======================================================================================
(defun reset-all () 
"Reinicia todas las variables globales para realizar una nueva búsqueda..."
     (setq  *open*  nil)
     (setq  *memory*  nil)
     (setq  *id*  0)
     (setq  *current-ancestor*  nil)
     (setq  *solucion*  nil))


(defun  dfs ()
"Realiza una búsqueda ciega, por el método especificado y desde un estado inicial hasta un estado meta
    los métodos posibles son:  :dfs
                               :best-fs"
  (reset-all)
  (let ((nodo nil)
	  (estado nil)
	  (sucesores  '())
	  (operador  nil)
	  (meta-encontrada  nil)
	  (pos-inicial  *start*)
	  (pos-meta  *goal*)
	  (metodo  :dfs))
	  (setq pos-inicial (char-to-list pos-inicial))
	  (setq pos-meta (char-to-list pos-meta))
	  (setq pos-inicial (check-if-is-initial pos-inicial))

      (insert-to-open   pos-inicial  nil  metodo)
      (loop until  (or  meta-encontrada
                        (null *open*))  do
	   (setq nodo    (get-from-open)              ;;Extraer el siguiente nodo de la frontera de búsquea
		     estado  (second  nodo)               ;;Identificar el estado y operador que contiene
		     operador  (third  nodo))             
	   (push  nodo  *memory*)                     ;;Recordarlo antes de que algo pueda pasar...
	   (cond    ((equal  pos-meta  (or (second estado) (first estado))) 
		                (format  t  "Éxito. Meta encontrada en ~A  intentos~%" (first  nodo))
		                (extract-solution  nodo)
		                (setq  meta-encontrada  T))
		         (t (setq  *current-ancestor*  (first  nodo))
				 (if (> (first nodo) 1) 
				 	(setq  sucesores  (expand nodo (second estado)) )
					(setq  sucesores  (expand nodo estado))
				 )
			     (setq  sucesores  (filter-memories  sucesores))     ;;Filtrar los estados ya revisados...
				  (loop for  element  in  sucesores  do
				    (insert-to-open  (first element)  (second element)  metodo))
					))))  )
			     
(defun best-fs ()
"Realiza una búsqueda ciega, por el método especificado y desde un estado inicial hasta un estado meta
    los métodos posibles son:  :dfs
                               :best-fs"
  (reset-all)
  (let ((nodo nil)
	  (estado nil)
	  (sucesores  '())
	  (operador  nil)
	  (meta-encontrada  nil)
	  (pos-inicial  *start*)
	  (pos-meta  *goal*)
	  (metodo  :best-fs))
	  (setq pos-inicial (char-to-list pos-inicial))
	  (setq pos-meta (char-to-list pos-meta))
	  (setq pos-inicial (check-if-is-initial pos-inicial))

      (insert-to-open   pos-inicial  nil  metodo)
      (loop until  (or  meta-encontrada
                        (null *open*))  do
	   (setq nodo    (get-from-open)              ;;Extraer el siguiente nodo de la frontera de búsquea
		     estado  (second  nodo)               ;;Identificar el estado y operador que contiene
		     operador  (third  nodo))             
	   (push  nodo  *memory*)                     ;;Recordarlo antes de que algo pueda pasar...
	   (cond    ((equal  pos-meta  (or (second estado) (first estado))) 
		                (format  t  "Éxito. Meta encontrada en ~A  intentos~%" (first  nodo))
		                (extract-solution  nodo)
		                (setq  meta-encontrada  T))
		         (t (setq  *current-ancestor*  (first  nodo))
				 (if (> (first nodo) 1) 
				 	(setq  sucesores  (expand nodo (second estado)) )
					(setq  sucesores  (expand nodo estado))
				 )
			     (setq  sucesores  (filter-memories  sucesores))     ;;Filtrar los estados ya revisados...
				  (loop for  element  in  sucesores  do
				    (insert-to-open  (first element)  (second element)  metodo))
					))))  ) 
(defun error-example () (get-cell-walls 1000 1000))
;;;=======================================================================================
;;;=======================================================================================
(start-maze)